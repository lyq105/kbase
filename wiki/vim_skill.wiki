=VIM 技巧=
{{{

T：记录VIM使用中的一些技巧
C：2010-12-23 17:20:28
M: 2010-12-29 17:48:27
}}}

%toc

==VIM排序==
=== 对文本的第2行到10行排序 ===
{{{
:2,10!sort
}}}
=== 对一段文字进行排序 ===
{{{
例如，有下面一段文字
version.o
pch.o
getopt.o
util.o
getopt1.o
inp.o
patch.o
backupfile.o
你想要对他们进行排序，按照字母顺序
通过以下几部可以做到：
a:移动光标到想要排序的那一行
b:使用ma标志改行为a
c:移动光标到想要排序的最后一行
d:使用指令"!'asort"，来完成排序（注意这些步骤都是在非输入模式下进行的。）

下面解释一下各个的用途。"!"表示将要执行指令，
"'a"表示从当前行到标志为a的行，'sort'是执行的指令。
	}}}
=== [[ref_vim_sort|参考资料]] ===

==VIM查找==
=== 简单替换表达式 ===
替换命令可以在全文中用一个单词替换另一个单词：
{{{
:%s/four/4/g
}}}
"%" 范围前缀表示在所有行中执行替换。最后的 "g" 标记表示替换行中的所有匹配点。如果仅仅对当前行进行操作，那么只要去掉%即可
如果你有一个象 "thirtyfour" 这样的单词，上面的命令会出错。这种情况下，这个单词会被替换成"thirty4"。要解决这个问题，用 "\<" 来指定匹配单词开头：
{{{
:%s/\<four/4/g
}}}
显然，这样在处理 "fourty" 的时候还是会出错。用 "\>" 来解决这个问题：
{{{
:%s/\<four\>/4/g
}}}
如果你在编码，你可能只想替换注释中的 "four"，而保留代码中的。由于这很难指定，可以在替换命令中加一个 "c" 标记，这样，Vim 会在每次替换前提示你：
{{{
:%s/\<four\>/4/gc
}}}

===  删除多余的空格 ===
要删除这些每行后面多余的空格，可以执行如下命令：
{{{
:%s/\s\+$//
}}}
命令前面指明范围是 "%"，所以这会作用于整个文件。"substitute" 命令的匹配模式是
"\s\+$"。这表示行末（$）前的一个或者多个（\+）空格（\s）。替换命令的 "to" 部分是空的："//"。这样就会删除那些匹配的空白字符。

=== 匹配重复性模式 ===
星号项 "*" 规定在它前面的项可以重复任意次。因此:
{{{
/a*
}}}
匹配 "a"，"aa"，"aaa"，等等。但也匹配 "" (空字串)，因为零次也包含在内。星号 "*" 仅仅应用于那个紧邻在它前面的项。因此 "ab*" 匹配 "a"，"ab"，"abb","abbb"，等等。如要多次重复整个字符串，那么该字符串必须被组成一个项。组成一项的方法就是在它前面加 "\("，后面加 "\)"。因此这个命令:
{{{
/\(ab\)*
}}}
匹配: "ab"，"abab"，"ababab"，等等。而且也匹配 ""。
要避免匹配空字串，使用 "\+"。这表示前面一项可以被匹配一次或多次。
{{{
/ab\+
}}}
匹配 "ab"，"abb"，"abbb"，等等。它不匹配 后面没有跟随 "b" 的 "a"。
要匹配一个可选项，用 "\="。 例如:
{{{
/folders\=
}}}
匹配 "folder" 和 "folders"。

=== 指定重复次数 ===
要匹配某一项的特定次数重复，使用 "\{n,m}" 这样的形式。其中 "n" 和 "m" 都是数字。在它前面的那个项将被重复 "n" 到 "m" 次 (|inclusive| 包含 "n" 和 "m")。例如:
{{{
/ab\{3,5}
}}}
匹配 "abbb"，"abbbb" 以及 "abbbbb"。
当 "n" 省略时，被默认为零。当 "m" 省略时，被默认为无限大。当 ",m" 省略时，就表示重复正好 "n" 次。例如:
| 模式   | 匹配次数       |
|--------+----------------|
| \{,4}  | 0,1,2,3或4     |
| \{3,}  | 3,4,5,等等     |
| \{0,1} | 0或1，同\=     |
| \{0,}  | 0 或更多，同*  |
| \{1,}  | 1 或更多，同\+ |
| \{3}   | 3              |

=== 多选一匹配 ===
在一个查找模式中，"或" 运算符是 "\|"。例如:
{{{
/foo\|bar
}}}
这个命令匹配了 "foo" 或 "bar"。更多的抉择可以连在后面:
{{{
/one\|two\|three
}}}
匹配 "one"，"two" 或 "three"。
如要匹配其多次重复，那么整个抉择结构须置于 "\(" 和 "\)" 之间:
{{{
/\(foo\|bar\)\+
}}}
这个命令匹配 "foo"，"foobar"，"foofoo"，"barfoobar"，等等。
再举个例子:
{{{
/end\(if\|while\|for\)
}}}
这个命令匹配 "endif"，"endwhile" 和 "endfor"。
==vim 列编辑 ==
进入列编辑模式的快捷键是在linux中的<Ctrl-V>,而Windows中是<Ctrl-q>.

== vim、gvim添加不识别的文件类型 ==
最近在学习karrigell，里面有.ks、.pih、.hip等文件类型，用vim编辑的时候，vim不识别这些文件类型。查阅了vim文档，总结了以下几种让增加vim不识别的文件类型的方法：


===使用命令===

.ks和.hip其实是python文件，.pih其实是html文件，在编辑的时候可以使用
{{{
set filetype=python
或
set filetype=html
}}}
来让vim调用相应的语法文件。


二、修改filetype.vim文件
{{{
filetype.vim文件结构为：

……

augroup filetypedetect

……

augroup END
}}}
在augroup filetypedetect到augroup END之间为文件类型定义。

找到au BufNewFile,BufRead *.py, *.pyw那行，将其修改为au BufNewFile,BufRead *.py, *.pyw, *.ks, *.hip
找到au BufNewFile,BufRead *.html, *.htm, *.shtml, *.stm那一行，将其修改为au BufNewFile,BufRead *.html, *.htm, *.shtml, *.stm, *.pih

就增加了.ks、.pih、.hip等文件类型识别了。

至于karrigell里新增的如Include、Session等需要高亮的关键词，可以直接修改syntax文件夹里的python.vim文件，在文件里添加相应的词就行了。

注：vim能够识别.ks文件，是作为KDE script文件，如果要当作python文件来识别，需要把au BufNewFile,BufRead *.ks那一行注释掉，上述修改才会起作用。


===添加新的语法文件===

syntax文件夹里都是vim的文件类型定义文件，可以按照类似的语法文件写一个，然后在filetype.vim增加文件类型。
 
===vimdiff===
http://www.ibm.com/developerworks/cn/linux/l-vimdiff/

